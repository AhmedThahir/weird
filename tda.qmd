## Topological data analysis

Topological data analysis (TDA) uses tools from topology to study data. Using TDA, we can infer high-dimensional structure from low-dimensional representations of data such as individual points. For example, one concept from topology is "persistent homology": a method for computing  topological features of a space at different spatial resolutions. Features that persist for a wider range of spatial resolutions represent important, intrinsic features of the data, while features that sporadically change are more likely due to random noise.

### Simplicial complexes {-}

Suppose we have a set of bivariate observations. These observations can be used to construct a graph where the individual points are considered vertices and the edges are determined by the distance between the points. Given a proximity parameter $\varepsilon$, two vertices are connected by an edge if the distance between these two points is less than or equal to $\varepsilon$. Starting from this graph, a simplicial complex --- a space built from simple pieces --- is constructed. A simplicial complex is a finite set of $k$-simplices, where $k$ denotes the dimension; for example, a point is a 0-simplex, an edge a 1-simplex, a triangle a 2-simplex, and a tetrahedron a 3-simplex. Suppose $S$ denotes a simplicial complex that includes a $k$-simplex. Then all non-empty subsets of the $k$-simplex are also included in $S$. For example, if $S$ contains a triangle $pqr$, then the edges $pq$, $qr$ and $rs$, and the vertices $p$, $q$ and $r$, are also in $S$.

The *Vietoris-Rips* complex is one type of $k$-simplicial complex. Given a set of points and a proximity parameter $\varepsilon > 0$, $k+1$ points within a distance of $\varepsilon$ to each other form a $k$-simplex. For example, consider the five points $p$, $q$, $r$, $s$ and $t$ shown on the left of @fig-tetrahedron, and suppose we choose $\varepsilon=0.5$. Then the distance between any two points other than $t$ is less than $\varepsilon$, and the distance between $t$ and any other point is greater than $\varepsilon$. Then we can construct the edges $pq$, $pr$, $ps$, $qr$, $qs$ and $rs$. From the edges $pq$, $qr$ and $rp$ we can construct the triangle $pqr$; from $pq$, $qs$ and $sp$ the triangle $pqs$; and so on, because the distance between any two points $p$, $q$, $r$ and $s$ is bounded by $\varepsilon$. By constructing the four triangles $pqr$, $qrs$, $rsp$ and $spq$ we can construct the tetrahedron $pqrs$. The vertex $t$ is not connected to this 3-simplex because the distance between $t$ and the other vertices is greater than $\varepsilon$. The simplicial complex resulting from these five points consists of the tetrahedron $pqrs$ and all the subset $k$-simplices and the vertex $t$.

```{r}
#| label: fig-tetrahedron
#| fig.cap: "Two examples of Vietoris-Rips complexes. Left: points $p$, $q$, $r$, $s$ and $t$, with a proximity parameter $\\varepsilon = 0.5$. The resulting complex consists of the tetrahedron $pqrs$, triangles $pqr$, $qrs$, $prs$, $pqs$, edges $pq$, $qr$, $rs$, $sp$, $qs$, $pr$, and vertices $p$, $q$, $r$, $s$ and $t$. Right: eight points with $\\varepsilon=1.5$. The resulting complex consists of the triangles $ade$, $acd$, edges $ad$, $ae$, $de$, $ac$, $cd$, $ch$, $bg$, and vertices $a,\\dots,h$."
#| message: false
#| warning: false
library(ggtda)
d <- tibble(
  x = c(0, 0.2, 0, 0.1, 0.75),
  y = c(0, 0.2, 0.2, 0, 0.75),
  point = letters[16:20]
)
prox <- 0.5
p1 <- ggplot(d, aes(x = x, y = y)) +
  coord_fixed() +
  stat_disk(radius = prox/2, fill = "#56B4E9") +
  stat_vietoris0() +
  stat_vietoris1(diameter = prox, col="#D55e00") +
  stat_vietoris2(diameter = prox, fill = "#D55E00") +
  geom_text(aes(label = point), nudge_x = 0.03, nudge_y = 0.03)

set.seed(2021)
X <- tibble(
  x = rnorm(8),
  y = rnorm(8),
  point = letters[1:8]
)
prox <- 1.3
p2 <- ggplot(X, aes(x = x, y = y)) +
  coord_fixed() +
  stat_disk(radius = prox/2, fill = "#56B4E9") +
  stat_vietoris0() +
  stat_vietoris1(diameter = prox, col="#D55e00") +
  stat_vietoris2(diameter = prox, fill = "#D55E00") +
  geom_text(aes(label = point), nudge_x = -0.1, nudge_y = 0.1)
patchwork::wrap_plots(p1, p2, ncol=2)
```

A second example is shown on the right of @fig-tetrahedron, where there are eight points, and  $\varepsilon=1.3$. Here, $f$ is a vertex, disconnected from all other points because it is further than $\varepsilon$ from any point. The pair $g$ and $b$ are connected to each other, but not to any other points. The points $ade$ and $adc$ form connected triangles (but not a tetrahedron), while $h$ is connected to them via $c$.

### Persistent homologies {-}

Given a point cloud of data, the resulting Vietoris-Rips complex depends on the value of the proximity parameter $\varepsilon$. As we increase $\varepsilon$, topological features such as connected components and holes appear and disappear.

Taking the small example on the right of @fig-tetrahedron, we explore what happens as $\varepsilon$ increases from 0.5 to 3.5. On the left-hand side, with a small value of $\varepsilon$, all points are disconnected, and the Vietoris-Rips complex consists of 8 vertices. As $\varepsilon$ increases, more points are connected to each other, and eventually, the complex will consist of a single connected component containing all possible connections up to the 8-simplex.

```{r}
#| label: fig-persistence
#| fig.cap: "Vietoris-Rips complexes resulting from different $\\varepsilon$ values."
#| warning: false
#| fig.width: 8
#| fig.asp: 1
#| out.width: "100%"
prox <- c(0.5, 1.5, 2.5, 3.5)
p <- list()
for(i in seq_along(prox)) {
  p[[i]] <- ggplot(X, aes(x = x, y = y)) +
    coord_fixed() +
    stat_disk(radius = prox[i]/2, fill = "#56B4E9") +
    stat_vietoris0()
  if(prox[i] > 0.5) {
    p[[i]] <- p[[i]] + stat_vietoris1(diameter = prox[i], col="#D55e00")
  }
  p[[i]] <- p[[i]] +
    stat_vietoris2(diameter = prox[i], fill = "#D55E00") +
    geom_text(aes(label = point), nudge_x = -0.1, nudge_y = 0.1) +
    labs(subtitle = latex2exp::TeX(sprintf('$\\epsilon$ = %.1f', prox[i]))) +
    xlim(-4,3) + ylim(-4,3.5)
}
patchwork::wrap_plots(p, nrow = 2)
```

To take a larger, more interesting, example, in @fig-annulus, we start with a point cloud of 50 points sampled uniformly from an annulus. As $\varepsilon$ increases from 0.005 to 1.4, the number of connected components decreases from 50 to 1. At $\varepsilon=0.005$, each point is disconnected from all others, and the Vietoris-Rips complex consists of 50 vertices. As $\varepsilon$ increases, the points start to connect to each other, and the number of connected components decreases. By $\varepsilon=0.7$, the connected components have merged, and the complex consists of a single connected component in the shape of the annulus. As $\varepsilon$ increases further, the hole disappears, and the complex is now in the shape of a ball.

```{r}
#| label: fig-annulus
#| fig.cap: "Vietoris-Rips complexes resulting from different $\\varepsilon$ values."
#| warning: false
#| fig.width: 8
#| fig.asp: 1
#| out.width: "100%"
outer_radius <- 1
inner_radius <- 0.7
n <- 50
rho <- sqrt(runif(n, inner_radius^2, outer_radius^2))
theta <- runif(n, 0, 2 * pi)
X <- tibble(
  x = rho * cos(theta),
  y = rho * sin(theta)
)
prox <- c(0.005, 0.3, 0.7, 1.4)
p <- list()
for(i in seq_along(prox)) {
  p[[i]] <- ggplot(X, aes(x = x, y = y)) +
    coord_fixed() +
    stat_disk(radius = prox[i]/2, fill = "#56B4E9") +
    stat_vietoris0() +
    stat_vietoris1(diameter = prox[i], col="#D55e00") +
    stat_vietoris2(diameter = prox[i], fill = "#D55E00") +
    labs(subtitle = latex2exp::TeX(sprintf('$\\epsilon$ = %.3f', prox[i]))) +
    xlim(-1.75,1.75) + ylim(-1.75,1.75)
}
patchwork::wrap_plots(p, nrow = 2)
```

The appearances and disappearances of these topological features are referred to as births and deaths, and can be illustrated using a *barcode* or a *persistence diagram*.

```{r}
#| include: false
#| label: longblueline
# Pre-computed for the caption of fig-barcodeandpersistence.
library(TDAstats)
ph1 <- calculate_homology(as.matrix(X), dim = 1)
longblueline <- ph1 |>
  as_tibble() |>
  filter(dimension==1) |>
  head(1)
```

```{r}
#| label: fig-barcodeandpersistence
#| dependson: "longblueline"
#| fig-cap: !expr 'sprintf("Left: the barcode of the point cloud in @fig-annulus. Each line denotes a feature, and spans from its birth diameter to its death diameter. The length of the line indicates the persistence of the feature. The 0-dimensional features (in orange) are connected components. The long blue line denotes the 1-dimensional hole that is born at $\\varepsilon = %.2f$ and disappears at $\\varepsilon = %.2f$. Right: the corresponding persistence diagram. Each point denotes a feature, and its coordinates indicate its birth and death diameters. Points far from the diagaonal are the most persistent.", longblueline$birth, longblueline$death)'
#| fig-width: 8
#| fig-height: 3
#| out-width: "100%"
library(TDAstats)
# compute the persistent homology
ph1 <- calculate_homology(as.matrix(X), dim = 1)
# plot topological barcode
bcd <- plot_barcode(ph1)
# plot persistence diagram
pst <- plot_persist(ph1) + xlab("Birth") + ylab("Death")
patchwork::wrap_plots(bcd, pst, nrow = 1)
```

@fig-barcodeandpersistence shows the barcode and the persistence diagram of the point cloud shown in @fig-annulus. The barcode comprises a set of horizontal line segments, each denoting a feature that starts at its birth diameter and ends at its death diameter. These line segments are grouped by their dimension. The orange lines in @fig-barcodeandpersistence denote the 0-dimensional features (i.e., connected components), and the blue lines denote 1-dimensional features (or holes). The same information is shown in the persistence diagram, where each point corresponds to one line, with the coordinates of the point equal to the birth and death diameters of the feature.

If there are $n$ observations, then there are $n$ 0-dimensional features, each born at diameter 0, and which die when the corresponding observation is connected to one or more other observations. The first death occurs when the closest two points merge, so the corresponding two features have the same birth and the same death diameters. Rather than have a repeated bar, only $n-1$ bars are shown. As $\varepsilon$ increases, the 0-dimensional features disappear one by one, as they merge with neighbouring features, and eventually the number of connected components decreases to 1 when all observations are connected.

The 1-dimensional features are born when a hole appears in the point cloud, and die when the hole disappears. The long blue line in @fig-barcodeandpersistence is born at `r sprintf("%.2f",longblueline$birth)` and dies at `r sprintf("%.2f",longblueline$death)`, and corresponds to the hole at the center of the point cloud in @fig-annulus.

Features that continue for a large range of $\varepsilon$ represent structural properties of the data that are of interest to us. These points lie well above the diagonal in the persistence diagram, while points closer to the diagonal are probably perturbations related to noise. In this plot, the triangle near the top represents the same feature as the long blue line in the left plot.

### Kernel bandwidth selection using TDA {-}

These topological concepts can be used to determine a bandwidth for a kernel density estimate designed for anomaly detection. First we construct the barcode of the data cloud for dimension zero using Vietoris-Rips complexes with increasing diameter $\varepsilon$. From the barcode we obtain the sequence of death diameters $\{d_i\}_{i=1}^n$ for the connected components.

Consider the example shown in @fig-tdaknn, comprising $n=1000$ observations where most points lie on an annulus, with a few points near the centre. The left panel shows a scatterplot of the data, while the barcodes for dimension 0 are shown in the centre. The right panel displays only the first 20 barcodes, with the dashed line drawn at the second largest death diameter.

```{r}
#| label: fig-tdaknn
#| fig-cap: "Left: A scatterplot of 1000 observations with most points falling on an annulus and some points near the centre. The other panels show the barcodes for dimension 0, with the dashed line drawn at the second largest death diameter. The right panel is a zoomed-in version of the top few barcodes from the centre panel."
#| fig-height: 3
#| fig-width: 8
#| fig-asp: 0.35
oo <- 10
outer_radius <- 1
inner_radius <- 0.7
n <- 1000 - oo
rho <- sqrt(abs(rnorm(n, mean = 5, sd = 1)))
theta <- runif(n, 0, 2 * pi)
X <- bind_rows(
  tibble(
    x = rho * cos(theta),
    y = rho * sin(theta)
  ),
  tibble(
    x = rnorm(oo, mean = 0, sd = 0.2),
    y = rnorm(oo, mean = 0, sd = 0.2)
  )
)
phom <- calculate_homology(X, dim = 0)
top2 <- tail(phom[,"death"],2)

g1 <- ggplot(X, aes(x, y)) +
  geom_point()
g2 <- plot_barcode(phom) +
  geom_vline(xintercept = top2[1], lty = 2) +
  guides(col = "none")
g3 <- plot_barcode(tail(phom, 20)) +
  geom_vline(xintercept = top2[1], lty = 2) +
  guides(col = "none")

patchwork::wrap_plots(g1, g2, g3, nrow = 1)
```

The plot on the right in @fig-tdaknn shows the largest 20 death diameters (out of the `r NROW(phom)` diameters shown in the centre panel). A vertical dashed line is drawn at diameter $h^* = `r sprintf("%.3f",top2[1])`$, the second largest death diameter. The largest death diameter is `r sprintf("%.3f",top2[2])`. Any diameter between these two values gives the same number of connected components. For this data set, $(`r sprintf("%.3f",top2[1])`, `r sprintf("%.3f",top2[2])`)$ is the largest diameter range for which the number of components stays the same. Thus, it signifies a global structural property of the point cloud, and we want a bandwidth that will help us detect this structure. In this example, an appropriate choice would be $\bm{H} = h_*^2\bm{I}$, which ensures that points within a distance of $h_*$ contribute to the kernel density estimate.

The simplest procedure is to first normalize the data matrix $\bm{Y}$ to obtain a new data set $\bm{Y}^* = \bm{S}_{\text{OGK}}^{-1/2} \bm{Y}$, where $\bm{S}_{\text{OGK}}$ is the robust covariance matrix estimate from the OGK algorithm given in @eq-ogk. This normalized data set will have a covariance matrix that is approximately equal to the identity matrix. From $\bm{Y}^*$, we can compute the Vietoris-Rips death diameters, $d_1,\dots,d_n$. These are then ordered to give $d_{(1)},\dots,d_{(n)}$, and we find the largest interval by computing successive differences
$\Delta_i = d_{(i+1)} - d_{(i)}$, for $i=1,\dots,n-1$. Following @lookout2021, we choose $h_* = d_{(i)}$ to be the diameter corresponding to the largest $\Delta_i$. Then we can define the bandwidth matrix to be
$$
  \bm{H} = h_*\bm{S}_{\text{OGK}}.
$$ {#eq-lookoutH}

  @fig-kdetda shows the resulting kernel density estimate using this bandwidth. This has effectively captured the annulus structure of the data.

  ```{r}
  #| label: fig-kdetda
  #| code-fold: false
  #| fig.cap: "Bivariate kernel density estimate with bandwidth chosen using TDA"
  annulus_density <- X |>
    kde(H = kde_bandwidth(X))#, method = "lookout"))
  annulus_density |>
    autoplot() +
    geom_point(aes(x, y), data = X, alpha=0.15)
  ```
