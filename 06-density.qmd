# Density-based methods {#sec-density-methods}

```{r}
#| include: false
#| cache: false
source("before-each-chapter.R")
```

Anomalies are observations that are unlikely to have come from the same distribution as the rest of the data. So one approach to identifying anomalies is to estimate the probability distribution of the data, and then identify observations that are unlikely to have come from that distribution. This is the approach taken by density-based methods, where anomalies are defined as observations of low probability.

## Log scores and the lookout algorithm

Any density-based method of anomaly detection first requires that we have a density estimate of each observation, which we will denote by $f(\bm{y}_i)$. This may be an assumed density, or estimated from the data; it may be a parametric function, or a nonparametric estimate; it may be a conditional density or a marginal density. Wherever it comes from, we will assume that $f$ represents a probability density function that is appropriate for the data set. When $\bm{y}_i$ takes values on a discrete space (such as the integers), then $f$ is a probability mass function, but we will call it a "density" for convenience when discussing methods that can apply to both discrete and continuous data.

The log score of an observation $\bm{y}_i$, is defined as $s_i = -\log f(\bm{y}_i)$. So it is a measure of how anomalous that observation is, given the density $f$. A large value of $s_i$ indicates that $\bm{y}_i$ is not a likely value, and so is a potential anomaly. On the other hand, typical values will have low log scores.

If the density $f$ has been estimated from the data, then it is sometimes useful to consider the leave-one-out (LOO) estimate given by $f_{-i}$. That is, $f_{-i}$ is the density estimate using all observations other than the $i$th observation. Then we will call the associated log score, a "log-LOO score", given by $s_i = -\log f_{-i}(\bm{y}_i)$.

The **"lookout" algorithm** (standing for Leave-One-Out Kernel density estimates for OUTlier detection) was proposed by @lookout2021 and uses log scores to find the probability of each observation being an anomaly. Although it was proposed using log scores from kernel density estimates, it can be applied to scores obtained using any density.

The underlying idea of the lookout algorithm is to use extreme value theory applied to the log scores to estimate the probability of each observation being an anomaly. We fit a Generalized Pareto Distribution to the log scores using the POT approach discussed in @sec-evt, with the $95^{\text{th}}$ percentile as the threshold. Then we apply the fitted distribution to the log loo scores to obtain the probability of each observation. In some cases, leave-one-out scores are too difficult to compute, and then the fitted distribution is applied to the log scores.

In the following sections, we will discuss how to compute log scores for a variety of different density estimates, and then we will apply the lookout algorithm to those scores.

## Linear regression {#sec-regression-log-scores}

Suppose we want to find anomalies amongst $n$ univariate observations $y_1,\dots,y_n$, and we have $p$ variables that we think might be useful for predicting $y$. Then we can write the conditional density as
$f(y \mid \bm{x})$, where $\bm{x}$ is a $p$-dimensional vector of predictor variables. Anomalies in $y$ are identified as observations that are unlikely to have come from the conditional density $f$.

For a linear Gaussian regression model, with independent observations and homoscedastic errors, the conditional distribution is given by
$$
  y \mid \bm{x} \sim N(\bm{x}_+'\bm{\beta}, \sigma^2),
$$ {#eq-gaussian-regression}
where $\bm{x}_+ = [1, \bm{x}]'$ is a $(p+1)$-dimensional vector containing a 1 in the first position, and $\bm{\beta}$ is a $(p+1)$-dimensional vector of regression coefficients.

### Model estimation

The model can be written in matrix form as
$$
  \bm{y} \sim N(\bm{X}\bm{\beta}, \sigma^2\bm{I}),
$$
where $\bm{X}$ is an $n\times(p+1)$ matrix with the first column being a vector of 1s, and the other columns containing the predictor variables, or equivalently as
$$
  \bm{\varepsilon} = \bm{y} - \bm{X}\bm{\beta} \sim N(\bm{0}, \sigma^2\bm{I}).
$$ {#eq-error-distribution}
Provided $\bm{X}$ is of rank $p+1$, and the errors $\bm{\varepsilon}$ are independent of $\bm{X}$, the model can be estimated using ordinary least squares regression [@seberlee2003], resulting in the estimate
$$
  \hat{\bm{\beta}} = (\bm{X}'\bm{X})^{-1}\bm{X}'\bm{y}.
$$
The fitted values are given by
$$
  \hat{\bm{y}} = \bm{X}\hat{\bm{\beta}} = \bm{H}\bm{y},
$$
where $\bm{H} = \bm{X}(\bm{X}'\bm{X})^{-1}\bm{X}'$ is known as the "hat"-matrix because it creates the "y-hat" values $\hat{\bm{y}}$ from the data $\bm{y}$.

The diagonals of $\bm{H}$, given by $h_1,\dots,h_n$, take values between 0 and 1. These are known as the "leverage" values [@faraway2004linear, p69], and measure how much each observation influences the corresponding fitted value. High leverage values (close to 1) correspond to observations that have a large influence on the estimated coefficients, and so leaving those observations out will lead to very different values for the fitted values and residuals. On the other hand, small leverage values (close to 0) correspond to observations that have little influence on the estimated coefficients, and so leaving those observations out will lead to similar values for the fitted values and residuals.

### Residuals

The residuals from the model are given by
$$
  \bm{e} = \bm{y} - \hat{\bm{y}} = (\bm{I} - \bm{H})\bm{y}.
$$ {#eq-residual-distribution}
Note that the residuals have the distribution $\bm{e}\mid\bm{X} \sim N(\bm{0}, \sigma^2(\bm{I} - \bm{H}))$, which is not quite the same as the distribution of the errors given by @eq-error-distribution. However, the two distributions are asymptotically equivalent as $n\rightarrow\infty$. Often, we need standardized residuals, which are obtained by dividing each residual by its estimated standard deviation, giving
$$ r_i = \frac{e_i}{\hat{\sigma}\sqrt{1-h_i}}, \qquad i = 1,\dots, n,
$$
where
$$
\hat\sigma^2 = \frac{1}{n-p-1}\sum_{i=1}^n e_i^2
$$ {#eq-residual-variance}
is the estimated residual variance.

A linear model can be estimated in R using the `stats::lm()` function. The `broom::augment()` function will compute the residuals (named `.resid`), the standardized residuals (named `.std.resid`), and the leverage values (names `.hat`).

The log-scores under the Gaussian linear regression model @eq-gaussian-regression can be estimated using these standardized residuals, giving
$$
  s_i = -\log\phi(r_i),
$$ {#eq-regression-log-score}
where $\phi(u) = (2\pi)^{-1/2}e^{-u^2}$ is the standard normal density. This can be computed as follows, assuming that `fit` is the output from `stats::lm()`.

```r
broom::augment(fit) |>
  mutate(log_score = -dnorm(.std.resid, log = TRUE))
```

### LOO residuals

The leave-one-out residual for the $i$th observation is defined as the difference between $\bm{y}_i$ and the predicted value obtained using a model fitted to all observations except the $i$th observation. At first, this appears to involve a lot of computation --- estimating $n$ separate models. However, the leave-one-out residuals are easily obtained from a linear regression model without actually having to re-estimate the model many times. It can be shown [@Montgomery2012, Appendix C.7] that the leave-one-out (LOO) residuals are given by
$$
  e_{-i}  = e_{i}/(1-h_{i}),
$$ {#eq-loo-residuals}
where $e_{i}$ is the residual obtained from fitting the model to *all* observations. If we divide the LOO residuals by $\hat\sigma$ from @eq-residual-variance, we obtain the "standardized" residuals.

In the context of anomaly detection, it often makes more sense to standardize each LOO residual by the standard deviation estimated from the model fitted to all other observations, rather than by $\hat\sigma$. If we leave out the $i$th observation, and fit a regression model to the remaining observations, then the estimated variance of the residuals is given by [@Montgomery2012, Appendix C.8]
$$
  \hat\sigma_{-i}^2 = \frac{1}{n-p-2}\left[(n-p-1)\hat\sigma^2 - e_{i}^2/(1-h_i)\right].
$$ {#eq-loo-residual-variance}
These are computed by `broom::augment()` and the values of $\hat\sigma_{-i}$ are returned in the column `.sigma`.

If we standardize each residual using $\sigma_{-i}$, we obtain the "studentized" residuals
$$
  r_{-i} = \frac{e_{i}}{\hat\sigma_{-i}\sqrt{1-h_i}},
$$ {#eq-studentized-residuals}
from which we obtain the log-LOO regression scores given by
$$
  s_{-i} = -\log \phi(r_{-i})
$$ {#eq-log-loo-regression-scores}

If `fit` is the output from `stats::lm()`, then these quantities can be computed as follows.

```r
broom::augment(fit) |>
  mutate(
    studentized_residuals = .resid / (.sigma * sqrt(1 - .hat)),
    log_loo_scores = -log(dnorm(studentized_residuals, log = TRUE))
  )
```

For convenience, the `reg_scores()` function can also be used to compute the regression scores given by @eq-regression-log-score and those given @eq-log-loo-regression-scores.

### Example: Shiraz reviews

For example, consider the wine reviews of Shiraz (aka Syrah), plotted in @fig-shiraz. We can fit a linear regression model to these data to obtain a conditional density estimate of price given the points awarded to each wine. Then, $\bm{X}$ contains just two columns: a column of 1s, and a column containing the points values. The vector $\bm{y}$ contains the log prices of the wines. The model can be fitted as follows.

```{r}
#| label: shiraz-regression
#| code-fold: false
shiraz <- wine_reviews |> filter(variety %in% c("Shiraz", "Syrah"))
fit_wine <- lm(log(price) ~ points, data = shiraz)
summary(fit_wine)
```

The fitted model can be written as
$$
  \log(\text{Price}) \sim N(`r sprintf("%.3f",coef(fit_wine)[1])` + `r sprintf("%.3f",coef(fit_wine)[2])` \times \text{Points}, `r sprintf("%.3f",sigma(fit_wine))`^2),
$$
and is depicted in @fig-shiraz-regression with 95% prediction intervals.

```{r}
#| label: fig-shiraz-regression
#| warning: false
#| fig.cap: Log price of Shiraz as a function of points, with 95% prediction intervals. The points are horizontally jitted to reduce overplotting. Points outside the prediction intervals are colored.
wine_aug <- broom::augment(fit_wine, data = shiraz, interval = "prediction") |>
  mutate(
    lwr = exp(.lower),
    upr = exp(.upper),
    location = case_when(
      price < lwr ~ "below",
      price > upr ~ "above",
      TRUE ~ "within"
    )
  )
wine_aug |>
  ggplot(aes(y = price, x = points, col = location)) +
  geom_jitter(height = 0, width = 0.1, alpha = 0.5) +
  geom_ribbon(aes(ymin = lwr, ymax = upr), fill = "#cccccc", alpha = 0.25) +
  geom_line(aes(y = exp(.fitted)), color = "#666666") +
  scale_y_log10() +
  guides(fill = "none", col = "none") +
  scale_color_manual(values = c("#0072B2", "#D55E00", "#AAAAAA"))
```

The log-LOO-scores obtained from this model are shown in @fig-shiraz-regression-scores, using the same colors as @fig-shiraz-regression to indicate whether the observation is below, within, or above, the 95% prediction interval.

```{r}
#| label: fig-shiraz-regression-scores
#| fig.cap: Residuals and log scores for the Shiraz data using a linear regression model. Points are colored to match the 95% prediction intervals in @fig-shiraz-regression.
#| fig.height: 6
#| fig.asp: 0.8
wine_aug <- wine_aug |>
  mutate(
    Studentized_residuals = .resid / (.sigma * sqrt(1 - .hat)),
    Log_scores = -dnorm(.std.resid, log = TRUE),
    Log_LOO_scores = -dnorm(Studentized_residuals, log = TRUE)
  )
wine_aug |>
  select(points, Studentized_residuals, Log_LOO_scores, location) |>
  pivot_longer(c(Studentized_residuals, Log_LOO_scores), names_to = "variable", values_to = "value") |>
  mutate(variable = factor(variable, levels = c("Studentized_residuals", "Log_LOO_scores"))) |>
  ggplot(aes(x = points, y = value, col = location)) +
  facet_grid(variable ~ ., scales = "free_y") +
  geom_jitter(height = 0, width = 0.1, alpha = 0.5) +
  geom_hline(yintercept = 0, color = "#666666") +
  labs(x = "Points", y = "") +
  guides(fill = "none", col = "none") +
  scale_color_manual(values = c("#0072B2", "#D55E00", "#AAAAAA"))
```

```{r}
#| label: shiraz-regression-scores
#| include: false
most_anomalous <- wine_aug |>
  filter(Log_LOO_scores > 17)
underpriced <- wine_aug |>
  filter(Studentized_residuals == min(Studentized_residuals))
good_buy <- wine_aug |>
  filter(points > 95) |>
  filter(Studentized_residuals == min(Studentized_residuals))
```

The over-priced wines under this model are shown in blue, while the under-priced wines are shown in orange. This shows that the most anomalous observations are the two with Log LOO scores above 17, and studentized residuals close to 6. The largest Log LOO score is for the most over-priced wine (under this model), a 2009 Shiraz from the Henschke winery in the Eden Valley region of South Australia, with `r most_anomalous$points[1]` points and a price of $`r most_anomalous$price[1]`.

```{r}
#| code-fold: false
wine_aug |>
  filter(Log_LOO_scores == max(Log_LOO_scores)) |>
  select(country:winery, year, points, price, Studentized_residuals, Log_LOO_scores)
```

The largest Log LOO score corresponding to an under-priced wine is for the wine with the lowest residual value, with `r underpriced$points[1]` points and a price of $`r underpriced$price[1]`. Another good buy, at the higher quality end, is the 2007 Syrah from the Rulo winery in the Columbia Valley in Washington State, USA:

```{r}
#| code-fold: false
wine_aug |>
  filter(points > 95) |>
  filter(Studentized_residuals == min(Studentized_residuals)) |>
  select(country:winery, year, points:price, Studentized_residuals, Log_LOO_scores)
```

This corresponds to the only orange point in @fig-shiraz-regression that has a point value above 95 and a price below the 95% prediction interval.

### Lookout probabilities

We will apply the lookout algorithm to these scores. First we compute the threshold value equal to the 95th percentile of the log scores, and then fit a generalized Pareto distribution to the scores above this threshold.

```{r}
#| code-fold: false
threshold <- quantile(wine_aug$Log_scores, prob = 0.95, type = 8)
gpd <- evd::fpot(wine_aug$Log_scores, threshold = threshold)$estimate
```

Now we use the fitted model to compute the lookout probabilities from the LOO scores for each observation.

```{r}
#| code-fold: false
wine_aug |>
  mutate(
    pval = evd::pgpd(Log_LOO_scores, loc = threshold,
      scale = gpd["scale"], shape = gpd["shape"], lower.tail = FALSE
    )
  ) |>
  filter(pval < 0.05) |> 
  select(country:winery, year, points, price, Log_LOO_scores, pval) |> 
  arrange(pval)
```

These are all wines that appear to be over-priced given their points values.

The above code was introduced to illustrate each step of the procedure, but it is simpler to use the `lookout_prob` function. This can be applied directly to the fitted model object, as follows.

```{r}
#| code-fold: false
shiraz <- shiraz |>
  mutate(lookout_prob = lookout(fit_wine)) |> 
  arrange(lookout_prob)
shiraz
```

@fig-shiraz-lookout shows the relationship between points and price, with the points colored according to the lookout probability. The six blue points are observations with lookout probabilities less than 0.02.

```{r}
#| label: fig-shiraz-lookout
#| fig.cap: Price vs points for Shiraz wines. Points are colored according to the lookout probability. The six blue points are observations with lookout probabilities less than 0.02.
shiraz |> 
  ggplot(aes(x = points, y = price, color = lookout_prob < 0.02)) +
   geom_jitter(height = 0, width = 0.2) +
   scale_y_log10()
```


## GAM log scores

In some applications, it is not appropriate to assume the conditional density is Gaussian, or that the relationships are linear. One useful model that allows for non-Gaussian densities, and non-linear relationships, is a generalized additive model or GAM. Under this model, the conditional density is given by [@Wood2017gam]
$$
  y\mid\bm{x} \sim f(\mu), \qquad \ell(\mu) = \sum_{k=1}^p g_k(x_{k}),
$$
where $\mu = \text{E}(y | \bm{x})$ denotes the conditional mean, $\ell()$ is a link function, and each $g_k$ function is smooth. If $f$ is Normal, $\ell$ is the identity, and $g_i(u) = \beta_i u$, then this reduces to the linear Gaussian model @eq-gaussian-regression.

```{r}
#| include: false
df_no <- cricket_batting |>
  filter(Innings > 0) |>
  mutate(prop_no = NotOuts / Innings)
p <- sum(df_no$NotOuts) / sum(df_no$Innings)
```

Consider the number of "not outs" for each batter in the `cricket_batting` data set. A "not out" occurs when a batsman has not been dismissed at the end of the team's innings. Let's consider if there are some batters who have an unusually high proportion of not outs. The data set contains results from `r sum(df_no$Innings)` innings, of which `r sum(df_no$NotOuts)` were not outs. So the overall proportion of not outs is `r sprintf("%.3f", p)`.

@fig-notouts shows the proportion of not outs for each batter as a function of the number of innings they played. There is some overplotting that occurs due to batters having the same numbers of not-outs and innings, which results in the higher color density of the corresponding plotted points. The unusual structure on the left of each plot is due to the discrete nature of the data. Batters who have played only a smaller number of innings tend to have a higher proportion of not outs on average, and a higher variance, than those who have played a large number of innings.

```{r}
#| label: fig-notouts
#| fig.cap: "Proportion of not outs for each batter as a function of the number of innings they played."
#| message: false
#| code-fold: false
df_no <- cricket_batting |>
  filter(Innings > 0) |>
  mutate(prop_no = NotOuts / Innings)
df_no |>
  ggplot(aes(x = Innings, y = NotOuts/Innings)) +
  geom_point(alpha = 0.15)
```

This suggests that we can construct a GAM for the number of not outs for each batter as a function of the number of innings they played. It is natural to use a Binomial distribution with a logit link function:
$$
  \text{NotOuts} \mid \text{Innings} \sim \text{Binomial}(n=\text{Innings},~ p),
$$
where
$$
  \log(p / (1- p)) = g(\text{Innings})
$$
We can fit this model using the `mgcv` package.

```{r}
#| label: fig-notouts-gam
#| message: false
#| code-fold: false
#| fig.cap: "Proportion of not outs for each batter as a function of the number of innings they played, with a GAM fit using a Binomial distribution."
fit_notouts <- mgcv::gam(prop_no ~ s(Innings), data = df_no,
           family = binomial(link = logit), weights = Innings)
notouts_aug <- broom::augment(fit_notouts, data = df_no, type.predict = "response")
notouts_aug |>
  ggplot(aes(x = Innings, y = prop_no)) +
  geom_point(alpha = 0.2) +
  geom_line(aes(y = .fitted), color = "#0072B2") +
  geom_ribbon(aes(ymin = .fitted - 2*.se.fit,
                  ymax = .fitted + 2*.se.fit),
              fill = "#0072B2", alpha = 0.2) +
  labs(y = "Proportion of not outs")
```

Now we can use the fitted model to compute the log scores from the Binomial distribution, and find the most anomalous batters. Unfortunately, there is not a convenient way to compute log-loo scores for GAM models, so we will only consider log scores in this example.

```{r}
#| code-fold: false
notouts_aug <- notouts_aug |>
  mutate(
    logscore = -dbinom(NotOuts, Innings, prob = .fitted, log = TRUE),
    lookout = lookout(fit_notouts)
  ) |>
  select(Player, Country, Innings, NotOuts, prop_no, .fitted, logscore) |>
  arrange(desc(logscore))
notouts_aug
```

The most anomalous batters are all "tail-enders" (i.e., not skilled batters) who played for a long time (so they have a large number of innings). Because they batted last, or nearly last, they are more likely to be not out at the end of the team's innings.

The `.fitted` value is the expected proportion of not outs for each player given the number of innings they have played, while `prop_no` gives the actual proportion of not outs they have had. The largest log score is for English batter Jimmy Anderson, who has had `r notouts_aug$NotOuts[1]` not outs in `r notouts_aug$Innings[1]` innings, which is much higher than the expected number of not outs of $`r notouts_aug[["Innings"]][1]` \times `r sprintf("%.3f", notouts_aug[[".fitted"]][1])` = `r sprintf("%.1f", notouts_aug[[".fitted"]][1]*notouts_aug[["Innings"]][1])`$. This anomaly is also seen in @fig-notouts-gam, as being somewhat unusual for that part of the data. Although Jimmy Anderson was not a great batter, he was good at defence, and was able to bat for a long time without being dismissed, leaving the other batter time to score runs.

We have identified an anomaly that is not anomalous in the proportion of not-outs, or in the number of innings, and the difference between the actual proportion and the predicted proportion is not anomalous either compared to some of the other values. However, because we have used a statistical model, we have been able to account for the particular features of this data set, such as the discrete nature of the data, and the relationship between the variance and the mean as a function of the number of innings played.


## KDE scores {#kdescores}

Suppose, instead of a regression or a GAM, we estimate $f$ using a kernel density estimate. Then we call the resulting log-scores "kde scores". The kernel density estimate at each observation is (@eq-mkde)
$$
  f_i = \hat{f}(\bm{y}_i) = \frac{1}{n} \sum_{j=1}^n K_H(\bm{y}_i-\bm{y}_j),
$$ {#eq-kdescores}
and so the "**kde score**" at each observation as
$$
  s_i = -\log(f_i).
$$
The largest possible score occurs when an observation has no other observations nearby. Then $f_i \approx K_H(\bm{0})/n$ because $K_H(\bm{y}_i-\bm{y}_j)\approx 0$ when $\|\bm{y}_i-\bm{y}_j\|$ is large. So the largest possible kde score, when using a Gaussian kernel, is
$$
  -\log(K_H(\bm{0})/n) \approx \log(n) + \frac{d}{2}\log(2\pi) + \frac{1}{2}\text{log det}(\bm{H}),
$$
where $\bm{H}$ is now the bandwidth matrix. For univariate data, when $d=1$, this simplifies to
$$
  -\log(K_h(0)/n) \approx \log(nh\sqrt{2\pi}).
$$

### Leave-one-out kde scores

The contribution of the $i$th point to the kernel density estimate at that point is $K_H(\bm{0})/n$. Therefore, we can compute leave-one-out kde scores as
$$
  f_{-i} = \left[nf_i - K_H(\bm{0})\right]/(n-1),
$$ {#eq-lookout}
where $f_i$ is the kde estimate at $\bm{y}_i$ using all data. Thus, we can compute the the leave-one-out kernel density scores without needing to re-estimate the density many times.

### Example: Old Faithful eruption durations

For the Old Faithful eruption duration data, we obtain the following kde log-LOO scores.

```{r}
#| label: ofscores
#| code-fold: false
of_scores <- oldfaithful |>
  mutate(
    score = kde_scores(duration, loo = FALSE),
    loo_score = kde_scores(duration, loo = TRUE)
  )
of_scores |> arrange(desc(score))
```

The two infinite LOO scores correspond to the extreme 2 hour duration, and the tiny 1 second duration. These are so improbable given the rest of the data, that the scores are effectively infinite. The regular kde scores (with `loo = FALSE`) are at their maximum values. @fig-ofscores shows the kde scores for each observation. This has the shape of $-\log(f)$, and so we can see that the lowest score corresponds to the mode of the estimated density.


```{r}
#| label: fig-ofscores
#| fig.cap: "KDE scores for the Old Faithful eruption durations."
#| dependson: ofscores
#| code-fold: false
of_scores |>
  filter(duration < 7000) |>
  ggplot(aes(x = duration, y = score)) +
  geom_point()
```


```{r}
#| label: lookout
#| code-fold: false
#| dependson: ofpot
oldfaithful |>
  mutate(lookout_pval = lookout_prob(duration)) |>
  filter(lookout_pval < 0.05) |>
  arrange(lookout_pval)
```

Low probabilities indicate likely outliers and high probabilities indicate normal points. This procedure has identified the minimum and maximum eruptions as clear outliers. In addition, ten other observations have been identified as potential anomalies, as they occur in regions of low probability. @fig-ofpot shows an HDR boxplot of the data, with those points identified as lookout anomalies highlighted in red.

```{r}
#| label: fig-ofpot
#| fig.cap: "HDR boxplot of the Old Faithful eruption durations, with the lookout anomalies highlighted in red."
#| dependson: ofpot2
#| fig.asp: 0.2
oldfaithful  |>
  filter(duration < 7200)  |>
  gg_hdrboxplot(duration, show_lookout = TRUE)
```

### More examples

Let's apply it to the six examples introduced in @sec-examples.

```{r}
#| label: cricket-lookout
#| code-fold: false
cricket_batting |>
  filter(Innings > 20) |>
  mutate(lookout = lookout_prob(Average)) |>
  filter(lookout < 0.05) |>
  select(Player, Average, lookout)  |>
  arrange(lookout)
```

Here Bradman is a clear anomaly (with a very low lookout probability), and no-one else is identified as a possible anomaly.

The same algorithm is easily applied in two dimensions. Here we use the `oldfaithful` data set, and consider the distribution of Duration and Waiting time, ignoring those observations that are greater than 2 hours in either dimension.

```{r}
#| label: lookout2
#| code-fold: false
of <- oldfaithful  |>
  select(duration, waiting) |>
  filter(duration < 7200, waiting < 7200)
of |>
  mutate(lookout = lookout_prob(duration)) |>
  filter(lookout < 0.05) |>
  arrange(lookout, duration)
```

Again, only the two anomalies are identified: the 1 second eruption, and the 90 second eruption.

Next we consider some artificial examples. Because the lookout algorithm uses the tail of the distribution, it requires a reasonably large sample size to work effectively. The `lookout_prob` function will return a warning if there are fewer than 25 observations. Here we consider the first 48 rows of the second variable in the `n01` data, along with the values 4.0 and 4.5.

```{r}
#| label: lookout3
#| code-fold: false
n01b <- tibble(y = c(n01$v2[1:48], 4, 4.5))
n01b |>
  mutate(lookout = lookout_prob(y)) |>
  filter(lookout < 0.05) |>
  arrange(lookout)
```

As expected, only the two genuine anomalies have been identified.

Finally, we consider simulated data from each of the distributions, N(0,1), $\text{t}_3$ and $\chi^2_4$.

```{r}
#| label: lookout4
#| code-fold: false
n01 |>
  select(v1) |>
  mutate(lookout = lookout_prob(v1)) |>
  filter(lookout < 0.05) |>
  arrange(lookout, v1)
set.seed(1)
tibble(y = rt(1000, df = 3)) |>
  mutate(lookout = lookout_prob(y)) |>
  filter(lookout < 0.05) |>
  arrange(lookout, y)
tibble(y = rchisq(1000, df = 4)) |>
  mutate(lookout = lookout_prob(y)) |>
  filter(lookout < 0.05) |>
  arrange(lookout, y)
```

The algorithm has found a small number of spurious anomalies in each case, out of the 1000 observations included. Notably, the results do not deteriorate with the heavier-tailed or skewed distributions.


### Example: Not outs in cricket batting


## Other density-based methods
